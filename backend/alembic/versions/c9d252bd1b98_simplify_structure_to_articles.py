"""simplify_structure_to_articles

Revision ID: c9d252bd1b98
Revises: 26dc64b9fc90
Create Date: 2025-10-27 21:59:25.445287

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c9d252bd1b98'
down_revision: Union[str, None] = '26dc64b9fc90'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('article',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_document_id', sa.Integer(), nullable=False),
    sa.Column('article_number', sa.String(length=20), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('fulltext_vector', postgresql.TSVECTOR(), nullable=True),
    sa.ForeignKeyConstraint(['base_document_id'], ['base_document.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('base_document_id', 'article_number', name='uq_article_doc_num')
    )
    op.create_index('idx_article_fulltext', 'article', ['fulltext_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_article_base_document_id'), 'article', ['base_document_id'], unique=False)
    op.create_index(op.f('ix_article_id'), 'article', ['id'], unique=False)
    op.create_table('article_version',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.Integer(), nullable=False),
    sa.Column('snapshot_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['article.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['snapshot_id'], ['snapshot.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_article_version_article_id'), 'article_version', ['article_id'], unique=False)
    op.create_index(op.f('ix_article_version_id'), 'article_version', ['id'], unique=False)
    op.create_index(op.f('ix_article_version_snapshot_id'), 'article_version', ['snapshot_id'], unique=False)
    op.drop_column('base_document', 'structure')
    op.add_column('edit_target', sa.Column('article_id', sa.Integer(), nullable=True))
    op.drop_constraint('edit_target_confirmed_tax_unit_id_fkey', 'edit_target', type_='foreignkey')
    op.drop_constraint('edit_target_initial_tax_unit_id_fkey', 'edit_target', type_='foreignkey')
    op.create_foreign_key(None, 'edit_target', 'article', ['article_id'], ['id'])
    op.drop_column('edit_target', 'confirmed_tax_unit_id')
    op.drop_column('edit_target', 'initial_tax_unit_id')
    # Add article_id as nullable first
    op.add_column('patched_fragment', sa.Column('article_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_patched_fragment_article_id'), 'patched_fragment', ['article_id'], unique=False)
    
    # Migrate data: populate article_id from tax_unit_id
    # For now, we'll make article_id nullable and handle data migration separately
    op.drop_index('ix_patched_fragment_tax_unit_id', table_name='patched_fragment')
    op.drop_constraint('patched_fragment_tax_unit_id_fkey', 'patched_fragment', type_='foreignkey')
    op.create_foreign_key(None, 'patched_fragment', 'article', ['article_id'], ['id'])
    # Keep tax_unit_id column for now (data migration needed)
    op.drop_index('idx_fulltext_vector', table_name='tax_unit', postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_fulltext_vector', 'tax_unit', ['fulltext_vector'], unique=False, postgresql_using='gin')
    # Add column back only if it doesn't exist to avoid DuplicateColumn error
    op.execute("ALTER TABLE patched_fragment ADD COLUMN IF NOT EXISTS tax_unit_id INTEGER")
    # Ensure the column is NOT NULL to match the original schema
    op.execute("ALTER TABLE patched_fragment ALTER COLUMN tax_unit_id SET NOT NULL")
    # Drop FK to article added in upgrade; explicit name for Postgres default
    op.execute("ALTER TABLE patched_fragment DROP CONSTRAINT IF EXISTS patched_fragment_article_id_fkey")
    op.create_foreign_key('patched_fragment_tax_unit_id_fkey', 'patched_fragment', 'tax_unit', ['tax_unit_id'], ['id'])
    op.drop_index(op.f('ix_patched_fragment_article_id'), table_name='patched_fragment')
    op.create_index('ix_patched_fragment_tax_unit_id', 'patched_fragment', ['tax_unit_id'], unique=False)
    op.drop_column('patched_fragment', 'article_id')
    op.add_column('edit_target', sa.Column('initial_tax_unit_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('edit_target', sa.Column('confirmed_tax_unit_id', sa.INTEGER(), autoincrement=False, nullable=True))
    # Drop FK to article added in upgrade; explicit name for Postgres default
    op.execute("ALTER TABLE edit_target DROP CONSTRAINT IF EXISTS edit_target_article_id_fkey")
    op.create_foreign_key('edit_target_initial_tax_unit_id_fkey', 'edit_target', 'tax_unit', ['initial_tax_unit_id'], ['id'])
    op.create_foreign_key('edit_target_confirmed_tax_unit_id_fkey', 'edit_target', 'tax_unit', ['confirmed_tax_unit_id'], ['id'])
    op.drop_column('edit_target', 'article_id')
    op.add_column('base_document', sa.Column('structure', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_article_version_snapshot_id'), table_name='article_version')
    op.drop_index(op.f('ix_article_version_id'), table_name='article_version')
    op.drop_index(op.f('ix_article_version_article_id'), table_name='article_version')
    op.drop_table('article_version')
    op.drop_index(op.f('ix_article_id'), table_name='article')
    op.drop_index(op.f('ix_article_base_document_id'), table_name='article')
    op.drop_index('idx_article_fulltext', table_name='article', postgresql_using='gin')
    op.drop_table('article')
    # ### end Alembic commands ###
