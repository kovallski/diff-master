"""init schema

Revision ID: 409b9558a51f
Revises: 
Create Date: 2025-10-22 00:58:49.220728

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '409b9558a51f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Defensive: clean up left-over enum types from previous partial runs
    op.execute("DROP TYPE IF EXISTS auditaction CASCADE;")
    op.execute("DROP TYPE IF EXISTS editjobstatus CASCADE;")
    op.execute("DROP TYPE IF EXISTS changetype CASCADE;")
    op.execute("DROP TYPE IF EXISTS taxunittype CASCADE;")
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('audit_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.Enum('import_', 'edit_upload', 'phase1_start', 'phase2_start', 'commit', 'rollback', 'export_txt', 'export_excel', name='auditaction'), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=True),
    sa.Column('entity_id', sa.Integer(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_log_id'), 'audit_log', ['id'], unique=False)
    op.create_index(op.f('ix_audit_log_user_id'), 'audit_log', ['user_id'], unique=False)
    op.create_table('base_document',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('imported_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('source_type', sa.String(length=10), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_base_document_id'), 'base_document', ['id'], unique=False)
    op.create_index(op.f('ix_base_document_user_id'), 'base_document', ['user_id'], unique=False)
    op.create_table('snapshot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('base_document_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['base_document_id'], ['base_document.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_snapshot_id'), 'snapshot', ['id'], unique=False)
    op.create_index(op.f('ix_snapshot_user_id'), 'snapshot', ['user_id'], unique=False)
    op.create_table('tax_unit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_document_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('section', 'chapter', 'article', 'clause', 'sub_clause', name='taxunittype'), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('breadcrumbs_path', sa.Text(), nullable=True),
    sa.Column('current_version_id', sa.Integer(), nullable=True),
    sa.Column('fulltext_vector', postgresql.TSVECTOR(), nullable=True),
    sa.ForeignKeyConstraint(['base_document_id'], ['base_document.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['tax_unit.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_fulltext_vector', 'tax_unit', ['fulltext_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_tax_unit_base_document_id'), 'tax_unit', ['base_document_id'], unique=False)
    op.create_index(op.f('ix_tax_unit_id'), 'tax_unit', ['id'], unique=False)
    op.create_index(op.f('ix_tax_unit_parent_id'), 'tax_unit', ['parent_id'], unique=False)
    op.create_table('workspace_file',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('base_document_id', sa.Integer(), nullable=True),
    sa.Column('source_type', sa.String(length=10), nullable=True),
    sa.Column('filename', sa.String(length=255), nullable=True),
    sa.Column('raw_payload_text', sa.Text(), nullable=True),
    sa.Column('raw_payload_bytes', sa.LargeBinary(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['base_document_id'], ['base_document.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workspace_file_id'), 'workspace_file', ['id'], unique=False)
    op.create_index(op.f('ix_workspace_file_user_id'), 'workspace_file', ['user_id'], unique=False)
    op.create_table('edit_target',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('workspace_file_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'running', 'completed', 'failed', 'review', name='editjobstatus'), nullable=False),
    sa.Column('instruction_text', sa.Text(), nullable=False),
    sa.Column('initial_tax_unit_id', sa.Integer(), nullable=True),
    sa.Column('confirmed_tax_unit_id', sa.Integer(), nullable=True),
    sa.Column('conflicts_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['confirmed_tax_unit_id'], ['tax_unit.id'], ),
    sa.ForeignKeyConstraint(['initial_tax_unit_id'], ['tax_unit.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_file_id'], ['workspace_file.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_edit_target_id'), 'edit_target', ['id'], unique=False)
    op.create_index(op.f('ix_edit_target_user_id'), 'edit_target', ['user_id'], unique=False)
    op.create_index(op.f('ix_edit_target_workspace_file_id'), 'edit_target', ['workspace_file_id'], unique=False)
    op.create_table('excel_report',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('snapshot_id', sa.Integer(), nullable=True),
    sa.Column('file_path', sa.String(length=512), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['snapshot_id'], ['snapshot.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_excel_report_id'), 'excel_report', ['id'], unique=False)
    op.create_index(op.f('ix_excel_report_user_id'), 'excel_report', ['user_id'], unique=False)
    op.create_table('tax_unit_version',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tax_unit_id', sa.Integer(), nullable=False),
    sa.Column('snapshot_id', sa.Integer(), nullable=False),
    sa.Column('text_content', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['snapshot_id'], ['snapshot.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tax_unit_id'], ['tax_unit.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tax_unit_version_id'), 'tax_unit_version', ['id'], unique=False)
    op.create_index(op.f('ix_tax_unit_version_snapshot_id'), 'tax_unit_version', ['snapshot_id'], unique=False)
    op.create_index(op.f('ix_tax_unit_version_tax_unit_id'), 'tax_unit_version', ['tax_unit_id'], unique=False)
    op.create_table('patched_fragment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('edit_target_id', sa.Integer(), nullable=False),
    sa.Column('tax_unit_id', sa.Integer(), nullable=False),
    sa.Column('before_text', sa.Text(), nullable=True),
    sa.Column('after_text', sa.Text(), nullable=True),
    sa.Column('change_type', sa.Enum('added', 'modified', 'deleted', name='changetype'), nullable=False),
    sa.Column('metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['edit_target_id'], ['edit_target.id'], ),
    sa.ForeignKeyConstraint(['tax_unit_id'], ['tax_unit.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patched_fragment_edit_target_id'), 'patched_fragment', ['edit_target_id'], unique=False)
    op.create_index(op.f('ix_patched_fragment_id'), 'patched_fragment', ['id'], unique=False)
    op.create_index(op.f('ix_patched_fragment_tax_unit_id'), 'patched_fragment', ['tax_unit_id'], unique=False)
    op.create_index(op.f('ix_patched_fragment_user_id'), 'patched_fragment', ['user_id'], unique=False)
    
    # ### Create test user ###
    # Хэш для пароля "test" (bcrypt)
    # Вставляем тестового пользователя с UUID
    op.execute("""
        INSERT INTO "user" (id, email, hashed_password, is_active, is_superuser, is_verified)
        VALUES (
            gen_random_uuid(),
            'test@test.com',
            '$2b$12$BCSlnfxoRP1MjgkKmoPU3.JOIS/amA.fckmav37GV5T959vtjL2yG',
            true,
            false,
            true
        )
        ON CONFLICT (email) DO NOTHING;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_patched_fragment_user_id'), table_name='patched_fragment')
    op.drop_index(op.f('ix_patched_fragment_tax_unit_id'), table_name='patched_fragment')
    op.drop_index(op.f('ix_patched_fragment_id'), table_name='patched_fragment')
    op.drop_index(op.f('ix_patched_fragment_edit_target_id'), table_name='patched_fragment')
    op.drop_table('patched_fragment')
    op.drop_index(op.f('ix_tax_unit_version_tax_unit_id'), table_name='tax_unit_version')
    op.drop_index(op.f('ix_tax_unit_version_snapshot_id'), table_name='tax_unit_version')
    op.drop_index(op.f('ix_tax_unit_version_id'), table_name='tax_unit_version')
    op.drop_table('tax_unit_version')
    op.drop_index(op.f('ix_excel_report_user_id'), table_name='excel_report')
    op.drop_index(op.f('ix_excel_report_id'), table_name='excel_report')
    op.drop_table('excel_report')
    op.drop_index(op.f('ix_edit_target_workspace_file_id'), table_name='edit_target')
    op.drop_index(op.f('ix_edit_target_user_id'), table_name='edit_target')
    op.drop_index(op.f('ix_edit_target_id'), table_name='edit_target')
    op.drop_table('edit_target')
    op.drop_index(op.f('ix_workspace_file_user_id'), table_name='workspace_file')
    op.drop_index(op.f('ix_workspace_file_id'), table_name='workspace_file')
    op.drop_table('workspace_file')
    op.drop_index(op.f('ix_tax_unit_parent_id'), table_name='tax_unit')
    op.drop_index(op.f('ix_tax_unit_id'), table_name='tax_unit')
    op.drop_index(op.f('ix_tax_unit_base_document_id'), table_name='tax_unit')
    op.drop_index('idx_fulltext_vector', table_name='tax_unit', postgresql_using='gin')
    op.drop_table('tax_unit')
    op.drop_index(op.f('ix_snapshot_user_id'), table_name='snapshot')
    op.drop_index(op.f('ix_snapshot_id'), table_name='snapshot')
    op.drop_table('snapshot')
    op.drop_index(op.f('ix_base_document_user_id'), table_name='base_document')
    op.drop_index(op.f('ix_base_document_id'), table_name='base_document')
    op.drop_table('base_document')
    op.drop_index(op.f('ix_audit_log_user_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_id'), table_name='audit_log')
    op.drop_table('audit_log')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # Drop enum types after all dependent tables removed
    op.execute("DROP TYPE IF EXISTS auditaction;")
    op.execute("DROP TYPE IF EXISTS editjobstatus;")
    op.execute("DROP TYPE IF EXISTS changetype;")
    op.execute("DROP TYPE IF EXISTS taxunittype;")
    
    # ### Delete test user (only if table still exists) ###
    op.execute(
        """
        DO $$
        BEGIN
            IF EXISTS (
                SELECT 1 FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_name = 'user'
            ) THEN
                DELETE FROM "user" WHERE email = 'test@test.com';
            END IF;
        END
        $$;
        """
    )
    # ### end Alembic commands ###
